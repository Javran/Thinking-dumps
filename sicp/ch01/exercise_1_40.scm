(load "../common/utils.scm")

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
  (try first-guess))

(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define dx 0.00001)

(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x)) dx)))

(define (cubic a b c)
  (lambda (x)
    ; x^3 + a*x^2 + b*x + c
    ; => (x^2 + a*x + b)*x + c
    ; => ((x+a)*x + b)*x + c
    (+ (* (+ (* (+ x a)
                x)
             b) x)
       c)))

; a subset of (cubic a' b' c')
; where all f(x) generated by cubic-2 can be simplified as:
; f(x) = (x-a)*(x-b)*(x-c)
; 3 roots are obviously: x1=a, x2=b, x3=c
(define (cubic-2 a b c)
  (lambda (x)
    (* (- x a)
       (- x b)
       (- x c))))

; f(x) = (x-10)(x-20)(x-30)
;      = x^3 - 60*x^2 + 1100*x - 6000
(let ((f (cubic-2 10 20 30)))
  (out 
    (newtons-method f 14.0)
    (newtons-method f 24.0)
    (newtons-method f 34.0)))
