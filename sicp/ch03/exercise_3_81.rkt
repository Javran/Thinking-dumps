#lang racket

; interfaces:
; * make-random-state : Int -> RandomState 
; * rand-update: RandomState -> RandomResult
; * rand-state: RandomResult -> RandomState
; * rand-result: RandomResult -> Float (where the return value is in [0,1)
; (`rand-result` and `rand-state` should be used
;  on values of type RandomResult, which is generated by `rand-update`)`

(define (make-random-state seed)
  ; see: http://docs.racket-lang.org/reference/generic-numbers.html#%28part._.Random_.Numbers%29
  (vector->pseudo-random-generator 
    (list->vector
      ; the first three integers are
      ;   in the range 0 to 4294967086, inclusive;
      ; the last three integers are
      ;   in the range 0 to 4294944442, inclusive;
      ; at least one of the first three integers is non-zero;
      ; and at least one of the last three integers is non-zero. 
      (list (remainder seed 4294967087)
            1
            0
            (remainder seed 4294944442)
            1
            0))))

(define (rand-update rand-state)
  (cons (random rand-state)
        rand-state))

(define rand-state cdr)
(define rand-result car)

(define (handle-request prev-rand-result request)
  (cond ((eq? (car request) 'generate)
          ; get the next value
          (rand-update (rand-state prev-rand-result)))
        ((eq? (car request) 'reset)
          ; reset stream using new seed
          (cons 'reset (make-random-state (cadr request))))))

(define (process-random-generator-requests reqs cur-state)
  (if (stream-empty? reqs)
    ; nothing left
    empty-stream
    ; else
    (let ((req (stream-first reqs)))
      (cond ((eq? (car req) 'generate)
              ; generate next value
              (let ((result (rand-update cur-state)))
                (stream-cons
                  (rand-result result)
                  (process-random-generator-requests
                    (stream-rest reqs)
                    (rand-state result)))))
            ((eq? (car req) 'reset)
              ; reset stream using new seed
              (process-random-generator-requests
                (stream-rest reqs)
                (make-random-state (cadr req))))))))

(stream-for-each
  (lambda (s)
    (display s) (newline))
  (process-random-generator-requests
    '( (reset 1) (generate) (generate) (generate)
                 (reset 2) (generate) (generate)
                 (reset 1) (generate) (generate))
    (make-random-state 0)
    
    ))
