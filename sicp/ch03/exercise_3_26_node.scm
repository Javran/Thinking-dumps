(define (make-node key val)
  (let ((ltree nil)
        (rtree nil))
    (define (set-key! x) (set! key x) 'ok)
    (define (set-val! x) (set! val x) 'ok)
    (define (set-ltree! x) (set! ltree x) 'ok)
    (define (set-rtree! x) (set! rtree x) 'ok)

    (define (dispatch m)
      (cond ((eq? m 'key) key)
            ((eq? m 'val) val)
            ((eq? m 'set-key!) set-key!)
            ((eq? m 'set-val!) set-val!)
            ((eq? m 'ltree) ltree)
            ((eq? m 'rtree) rtree)
            ((eq? m 'set-ltree!) set-ltree!)
            ((eq? m 'set-rtree!) set-rtree!)
            ))
    dispatch))

(define (key-node n) (n 'key))
(define (val-node n) (n 'val))
(define (ltree-node n) (n 'ltree))
(define (rtree-node n) (n 'rtree))

(define (set-key-node! n x) ((n 'set-key!) x))
(define (set-val-node! n x) ((n 'set-val!) x))
(define (set-ltree-node! n x) ((n 'set-ltree!) x))
(define (set-rtree-node! n x) ((n 'set-rtree!) x))
