(define (install-polar-package)
  (define make cons)
  (define magnitude car)
  (define angle cdr)

  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))

  (define (test-package)
    (let* ((make (get 'make 'polar))
            (x1 (make 2 (/ pi 6)))
            (x2 (make 1 (/ pi 2))))
       (let ((testcases
               (list (mat 'magnitude x1 2)
                     (mat 'angle x1 (/ pi 6))
                     (mat 'magnitude x2 1)
                     (mat 'angle x2 (/ pi 2))
                     (mat 'imag-part x1 1)
                     (mat 'real-part x2 0))))
         (do-test-q apply-generic testcases (close-number? eps)))
       ))
  
  (put 'make 'polar (tagged 'polar make))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'test 'polar-package test-package)
  'done)
