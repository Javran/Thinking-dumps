(define (install-complex-package)
  (load "./number_system_rect.scm")
  (load "./number_system_polar.scm")
  (install-rect-package)
  (install-polar-package)

  (define make-ri (get 'make 'rect))
  (define make-ma (get 'make 'polar))

  (define (real-part x) (apply-generic 'real-part x))
  (define (imag-part x) (apply-generic 'imag-part x))
  (define (magnitude x) (apply-generic 'magnitude x))
  (define (angle x) (apply-generic 'angle x))

  (define (test-package)
    (run-test 'rect-package)
    (run-test 'polar-package)
    (let* ((make-ri (get 'make-ri 'complex))
           (make-ma (get 'make-ma 'complex))
           (x1 (make-ri (sqrt 3) 1))
           (x2 (make-ma 2 (/ pi 6))))
      (let ((testcases
              (list (mat 'real-part x1 (sqrt 3))
                    (mat 'real-part x2 (sqrt 3))
                    (mat 'imag-part x1 1)
                    (mat 'imag-part x2 1)
                    (mat 'magnitude x1 2)
                    (mat 'magnitude x2 2)
                    (mat 'angle x1 (/ pi 6))
                    (mat 'angle x2 (/ pi 6))
                    )))
        (do-test apply-generic testcases (close-number? eps)))
      ))
  (put 'make-ri 'complex (tagged 'complex make-ri))
  (put 'make-ma 'complex (tagged 'complex make-ma))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'test 'complex-package test-package)

  'done)
